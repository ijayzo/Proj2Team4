---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project2team4-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: java-deployment
  template:
    metadata:
      labels:
        app: java-deployment
    spec:
      containers:
      - image: project2team4/java:latest
        imagePullPolicy: Always
        name: java
        ports: 
        - containerPort: 8000
        livenessProbe:
            initialDelaySeconds: 100
            httpGet:
              path: /employee
              port: 8000
        readinessProbe:
            initialDelaySeconds: 100
            httpGet:
              path: /employee
              port: 8000


---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  labels:
#    app: project2team4-deployment-grafana
#  name: project2team4-deployment-grafana-v1
#  namespace: default
#spec:
#  replicas: 2
#  minReadySeconds: 45
#  selector:
#    matchLabels:
#      app: grafana-deployment
#  strategy:
#    rollingUpdate:
#      maxSurge: 25%
#      maxUnavailable: 25%
#    type: RollingUpdate
#  template:
#    metadata:
#      labels:
#        app: grafana-deployment
#    spec:
#      containers:
#        - name: grafana
#          image: grafana/grafana:latest

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project2team4-deployment-loki
spec:
  replicas: 2
  selector:
    matchLabels:
      app: loki-deployment
  template:
    metadata:
      labels:
        app: loki-deployment
    spec:
      containers:
      - image: grafana/loki:latest
        name: loki
        imagePullPolicy: Always
        ports:
        - containerPort: 3100
        livenessProbe:
              httpGet:
                path: /
                port: 3100
        readinessProbe:
              httpGet:
                path: /
                port: 3100






---
apiVersion: v1
kind: Service
metadata:
  name: java-service
spec:
  selector:
    app: java-deployment
    type: NodePort
  ports:
  - port: 8000
    targetPort: 8000

---
#apiVersion: v1
#kind: Service
#metadata:
#  name: grafana-service
#spec:
#  type: LoadBalancer
#  ports:
#    - port: 80
#    - targetPort: 3000
#      port: 3000
#    - protocol: TCP
#      port: 3000
#  selector:
#    app: grafana-deployment



---
apiVersion: v1
kind: Service
metadata:
  name: loki-service
spec:
  selector:
    app: loki-deployment
    type: NodePort
  ports:
    - port: 3100
      targetPort: 3100


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: java-ingress-data
  labels:
    name: java-ingress
spec:
  defaultBackend:
    service:
      name: java-service
      port: 
        number: 8000

---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: grafana-ingress-data
#  labels:
#    name: grafana-ingress
#spec:
#  defaultBackend:
#    service:
#      name: grafana-service
#      port:
#        number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: loki-ingress-data
  labels:
    name: loki-ingress
spec:
  defaultBackend:
    service:
      name: loki-service
      port:
        number: 3100


